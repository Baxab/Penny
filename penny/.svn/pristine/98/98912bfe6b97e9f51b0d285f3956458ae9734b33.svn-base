#! /usr/bin/env python

import rospy
from std_msgs.msg import String, Bool
from controller.msg import ControllerTransition


personID = ""
cancelGoal = ""

def definition():
    global current_state
    current_state = 1


def deal_with_tracker(tracker_data):
    global cancelGoal
    if(current_state == 1 and "something"): #TODO
        cancelGoal = "cancel_goal"
        speak_pub.publish("YOU! STOP!")
        speak_pub.publish("pls")
        return 3
    else:
        return 1

def state_sound_alarm(change_state_data):
    return 0
         
def state_navigation(change_state_data):
    if("canceled_goal" in change_state_data.data):
        print("----------------CANCELED GOAL");
        return 3;
    elif("door" in change_state_data.data):
        print("----------------REACHED DOOR");
        return 2;
    elif("True" in change_state_data.data):
        print("----------------REACHED");
        return 1;
    else:
        print("----------------NOT REACHED");
        return 0;

def state_open_door_detection(change_state_data):
    if change_state_data.data:
        # TODO wait for 5 seconds twice, then SOUND_ALARM
        return 0
    else:
        return 1
    
def state_follower(change_state_data):
    if change_state_data.data:
        return 4;
    else:
        return 0;

def state_face_recognition(change_state_data):
    if change_state_data:
        return 1
    else:
        return 6

def state_face_training(change_state_data):
    if change_state_data:
        return 1
    else:
        return 0
    
def state_card_recognition(change_state_data):
    global personID
    if change_state_data.data != "No Card":
        personID = change_state_data.data
        return 5
    else:
        return 0


# map the inputs to the function blocks
states = {
            0 : state_sound_alarm,
            1 : state_navigation,
            2 : state_open_door_detection,
            3 : state_follower,
            4 : state_face_recognition,
            5 : state_face_training,
            6 : state_card_recognition,
}

# In charge of deciding new state and publishing the update
def callback(change_state_data):
    global current_state
    global personID
    global cancelGoal

    rospy.loginfo(change_state_data)
	
    current_state = states[current_state](change_state_data)    # decides next state

    if(current_state == 0):
        rospy.signal_shutdown("SOUND ALARM")
    else:
        if current_state == 1:
            transition = ControllerTransition(str(states[current_state]), cancelGoal)
            cancelGoal = ""
	elif current_state == 6:
            transition = ControllerTransition(str(states[current_state]), personID)
            personID = ""
        else:
            transition = ControllerTransition(str(states[current_state]), "")
            
        pub.publish(transition)
	

if __name__ == '__main__':
    rospy.init_node('controller')

    definition()

    rospy.Subscriber('tf', tf2_msgs/TFMessage, deal_with_tracker)

    rospy.Subscriber('state_sound_alarm', Bool, callback)
    rospy.Subscriber('state_navigation', String, callback)
    rospy.Subscriber('state_open_door_detection', Bool, callback)
    rospy.Subscriber('state_follower', Bool, callback)
    rospy.Subscriber('state_face_recognition', Bool, callback)
    rospy.Subscriber('state_face_training', Bool, callback)
    rospy.Subscriber('state_card_recognition', String, callback)
    rospy.Subscriber('state_speech', Bool, callback)

    pub = rospy.Publisher('state_machine/control', ControllerTransition, queue_size=10)
    speak_pub = rospy.Publisher('speak', String, queue_size=10)
    
    rospy.spin()
    
    
