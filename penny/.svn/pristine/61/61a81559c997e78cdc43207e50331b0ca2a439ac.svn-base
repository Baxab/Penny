from geometry_msgs.msg import Pose, PoseArray, Quaternion
from pf_base import PFLocaliserBase
import math
import rospy

from util import rotateQuaternion, getHeading
from random import random

from time import time
NUM_PARTICLES = 10

class PFLocaliser(PFLocaliserBase):
       
    def __init__(self):
        # Call the superclass constructor
        super(PFLocaliser, self).__init__()
        
        # Set motion model parameters
		elf.ODOM_ROTATION_NOISE = 1#???? # Odometry model rotation noise
		self.ODOM_TRANSLATION_NOISE = 1#???? # Odometry model x axis (forward) noise
		self.ODOM_DRIFT_NOISE = 1#???? # Odometry model y axis (side-to-side) noise

        # Sensor model parameters
        self.NUMBER_PREDICTED_READINGS = 20 	# Number of readings to predict
        
       
    def initialise_particle_cloud(self, initialpose):
        # Set particle cloud to initialpose plus noise
        poseArray = PoseArray()
        for i in range(NUM_PARTICLES):
            thisPose = Pose()
            thisPose.position.x = initialpose.position.x + (random.gauss(0, 1) * self.ODOM_TRANSLATION_NOISE)
            thisPose.position.y = initialpose.position.y + (random.gauss(0, 1) * self.ODOM_DRIFT_NOISE)

            rotationAngle = getHeading(initialpose.orientation) + (random.vonmisesvariate(0, 1) * self.ODOM_ROTATION_NOISE)
            thisPose.orientation = rotateQuaternion(initialpose.orientation, rotationAngle)

            poseArray.poses.append(thisPose);
        return poseArray
 
    
    def update_particle_cloud(self, scan):
        # Update particlecloud, given map and laser scan
        poseArray = PoseArray()

        for i in range(NUM_PARTICLES):
            totalWeight = 0
            for pose in self.particlecloud:
                totalWeight += self.sensor_model.get_weight(pose)
                
            value = random.random() * total_weight;	
            
            for pose in self.particlecloud:
                value -= self.sensor_model.get_weight(pose)
                if value <= 0:
                    break
            poseArray.append(pose)

        # Add some noise to all the particles
        for thisPose in poseArray:
            thisPose.position.x += (random.gauss(0, 1) * self.ODOM_TRANSLATION_NOISE)
            thisPose.position.y += (random.gauss(0, 1) * self.ODOM_DRIFT_NOISE)

            rotationAngle = getHeading(thisPose.orientation) + (random.vonmisesvariate(0, 1) * self.ODOM_ROTATION_NOISE)
            rotationAngle = rotationAngle % (2 * math.pi)
            thisPose.orientation = rotateQuaternion(thisPose.orientation, rotationAngle)

        self.particle_cloud = poseArray 
        

    def estimate_pose(self):
        # Create new estimated pose, given particle cloud
        # E.g. just average the location and orientation values of each of
        # the particles and return this.
        
        # Better approximations could be made by doing some simple clustering,
        # e.g. taking the average location of half the particles after 
        # throwing away any which are outliers

